{"version":3,"sources":["serviceWorker.js","index.js","App.js","ipfs.js","getWeb3.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","state","networkId","contract","web3","ipfsHash","buffer","accounts","componentDidMount","a","async","getWeb3","eth","getAccounts","net","getId","deployedNetwork","ProofOfExistenceContract","networks","instance","Contract","abi","address","setState","alert","console","error","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","onIPFSSubmit","ipfs","add","err","log","hash","notarize","awaitingNotarizeToast","this","methods","send","toastProvider","addMessage","secondaryMessage","actionHref","actionText","variant","className","Provider","ref","node","maxWidth","mx","p","h2","mr","role","aria-label","px","type","name","id","onChange","mb","onClick","e","href","title","Component","require","host","port","protocol","Promise","resolve","reject","addEventListener","ethereum","Web3","enable","provider","providers","HttpProvider"],"mappings":"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","file":"static/js/main.d7aa3c9b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from \"react\";\nimport ipfs from './ipfs';\nimport getWeb3 from './getWeb3';\nimport { EthAddress,ToastMessage,Input, Button, Link, Card, Heading, Text} from 'rimble-ui';\nimport ProofOfExistenceContract from './contracts/ProofOfExistence.json';\n\nclass App extends Component {\n\n  state = { networkId: null, contract: null, web3: null, ipfsHash: null, buffer: null, accounts: null};\n\n  componentDidMount = async () => {\n    try {\n     // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      const accounts = await web3.eth.getAccounts();\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = ProofOfExistenceContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        ProofOfExistenceContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ networkId, web3, accounts, contract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n   };\n\n  notarize(ipfsHash, {...props}){\n    const { accounts, contract } = this.state;\n      contract.methods.notarize(ipfsHash).send({ from: accounts[0] });\n      console.log(ipfsHash + \"= ipfsHash within notarize() \");\n  }\n\n  awaitingNotarizeToast(){\n    if(this.state.ipfsHash){\n      return (<div>\n        {window.toastProvider.addMessage(\"Awaiting your confirmation through MetaMask\", {\n        secondaryMessage: \"Your document \"+ this.state.ipfsHash + \" is will be notarized.\",\n        actionHref:\"\",\n        actionText: \"\",\n        variant: \"processing\"})}\n      </div>\n      )\n    }\n  }\n//IPFS Functions     \n\n  //captures file uploaded through Files API \n    captureFile = (event)=>{\n    event.preventDefault();\n    const file = event.target.files[0];\n    let reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n    reader.onloadend =() => this.convertToBuffer(reader);\n  }\n  //converts file to buffer to upload to IPFS\nconvertToBuffer = async(reader) =>{\n    const buffer = await Buffer.from(reader.result);\n    this.setState({ buffer })\n  }\n\n //uploads document file to IPFS and sets the IPFS Hash in response to ipfsHash\n  onIPFSSubmit = async() =>{\n     await ipfs.add(this.state.buffer, (err, ipfsHash)=>{\n      console.log(err, ipfsHash);\n      this.setState({ipfsHash: ipfsHash[0].hash});\n      this.notarize(ipfsHash[0].hash);\n      this.awaitingNotarizeToast();\n    });\n  }\n//End of IPFS Functions\n\n  render() {\n    if (!this.state.web3) {\n\n      return  <Card maxWidth={'640px'} mx={'auto'} p={3} >\n      <Text>Loading Web3, accounts, and contract...</Text>\n      </Card>\n    }\n\n    return (\n      <div className=\"App\">\n      <ToastMessage.Provider ref={node => (window.toastProvider = node)} />\n      <Card maxWidth={'640px'} mx={'auto'} p={3} >\n                  <Heading.h2 mr={3}>\n                    <span role=\"img\" aria-label=\"Waving hand\">\n                      👋\n                    </span>\n                  </Heading.h2>\n                  <Text>\n                    Hi there, I'm Max. <br/><br/>This is my Proof of Existence Dapplication for the Consensys Academy Blockchain Bootcamp! <br/><br/> It can notarize any document you want to upload and place it on IPFS. Give it a whirl!\n                  </Text>\n                </Card>\n        <Card maxWidth={'640px'} mx={'auto'} p={3} >\n                  <Text>\n                    <strong>Warning: this Dapp only works on your local Ganache at port 8545.</strong>\n                  </Text>\n                </Card>\n        <Card maxWidth={'640px'} mx={'auto'} p={3} >\n        <Card maxWidth={'640px'} mx={'auto'} p={3} px={4}>\n                  <Text><strong>Step 1:</strong> Upload a File from your Computer!\n<br/><br/>\n                  You will see the button \"Choose File...\" update with your file's name upon selecting a file from your computer!\n<br/><br/>\n                  The application will not notarize or upload without this! <br/><br/>\n                  </Text>\n          <Input type=\"file\" name=\"file\" id=\"file\" onChange={this.captureFile} />\n          </Card>\n          <br/><br/>\n          <Card maxWidth={'640px'} mx={'auto'} p={3} px={4}>\n           <Text><strong>Step 2:</strong> Click \"Upload to IPFS and Notarize with Ganache\" to upload your document to IPFS and notarize it. \n                <br/><br/>\n                  You will see an update with your IPFS Hash and a link to the IPFS Browser to see your file! \n                  <br/><br/><strong> Make sure you have Ganache running on port 8545, not 7545.</strong>\n                  <br/><br/>You will also be prompted by MetaMask to notarize the IPFS Hash of the document you uploaded. <br/><br/><strong>Please click \"Confirm\" in the MetaMask pop up after clicking this button</strong>\n                  </Text>\n         \n          <Button mb={3} onClick={async(e)=>{\n              e.preventDefault();\n              this.onIPFSSubmit();\n              }}>Upload to IPFS and Notarize with Ganache</Button>\n          </Card>\n          <Card maxWidth={'640px'} mx={'auto'} p={3} >\n          {this.state.ipfsHash ? <Text><strong>IPFS Hash for your file: <br/><EthAddress address={this.state.ipfsHash}/></strong> <br/><strong>To see the file on IPFS, go to the</strong> <Link href={'//ipfsbrowser.com/'} target=\"_blank\" title=\"This link goes somewhere\">IPFS Hash Browser</Link> <strong>and enter in this hash.</strong> </Text>: \"\"}\n          </Card>\n  </Card>\n  </div>\n);\n  }\n\n}\n\nexport default App;","const IPFS = require('ipfs-api');\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', \n    port: 5001,protocol: 'https' });\nexport default ipfs;","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n"],"sourceRoot":""}